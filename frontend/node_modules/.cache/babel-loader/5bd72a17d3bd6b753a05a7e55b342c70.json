{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alexander\\\\Desktop\\\\django-react-boilerplate\\\\root\\\\src\\\\containers\\\\Checkout.js\";\nimport React from \"react\";\nimport { CardElement, ElementsConsumer } from \"@stripe/react-stripe-js\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Button, Container, Message } from \"semantic-ui-react\";\nimport { authAxios } from \"../Utils\";\nconst stripePromise = loadStripe(\"pk_test_JJ1eMdKN0Hp4UFJ6kWXWO4ix00jtXzq5XG\");\n\nclass CheckoutForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      error: null,\n      success: false\n    };\n\n    this.handleSubmit = async event => {\n      // Block native form submission.\n      event.preventDefault();\n      const {\n        stripe,\n        elements\n      } = this.props;\n\n      if (!stripe || !elements) {\n        // Stripe.js has not loaded yet. Make sure to disable\n        // form submission until Stripe.js has loaded.\n        return;\n      }\n\n      this.setState({\n        loading: true\n      }); // Get a reference to a mounted CardElement. Elements knows how\n      // to find your CardElement because there can only ever be one of\n      // each type of element.\n\n      const cardElement = elements.getElement(CardElement);\n      const {\n        error,\n        paymentMethod\n      } = await stripe.createPaymentMethod({\n        type: \"card\",\n        card: cardElement\n      });\n      authAxios.post(\"/api/handle-payment\", {\n        card: cardElement\n      }).then(res => {\n        this.setState({\n          loading: false,\n          success: true\n        });\n      }).catch(err => {\n        this.setState({\n          loading: false,\n          error: err\n        });\n      });\n\n      if (error) {\n        console.log(\"[error]\", error);\n      } else {\n        console.log(\"[PaymentMethod]\", paymentMethod);\n      }\n    };\n  }\n\n  render() {\n    const {\n      stripe\n    } = this.props;\n    const {\n      error,\n      loading,\n      success\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardElement, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      primary: true,\n      type: \"submit\",\n      disabled: !stripe,\n      style: {\n        marginTop: \"10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, \"Pay\")));\n  }\n\n}\n\nconst InjectedCheckoutForm = () => {\n  return /*#__PURE__*/React.createElement(Container, {\n    text: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, \"Complete your Order\"), /*#__PURE__*/React.createElement(Elements, {\n    stripe: stripePromise,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ElementsConsumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, ({\n    elements,\n    stripe\n  }) => /*#__PURE__*/React.createElement(CheckoutForm, {\n    elements: elements,\n    stripe: stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default InjectedCheckoutForm;","map":{"version":3,"sources":["C:/Users/Alexander/Desktop/django-react-boilerplate/root/src/containers/Checkout.js"],"names":["React","CardElement","ElementsConsumer","Elements","loadStripe","Button","Container","Message","authAxios","stripePromise","CheckoutForm","Component","state","loading","error","success","handleSubmit","event","preventDefault","stripe","elements","props","setState","cardElement","getElement","paymentMethod","createPaymentMethod","type","card","post","then","res","catch","err","console","log","render","marginTop","InjectedCheckoutForm"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { CardElement, ElementsConsumer } from \"@stripe/react-stripe-js\";\r\n\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\n\r\nimport { Button, Container, Message } from \"semantic-ui-react\";\r\n\r\nimport { authAxios } from \"../Utils\";\r\n\r\nconst stripePromise = loadStripe(\"pk_test_JJ1eMdKN0Hp4UFJ6kWXWO4ix00jtXzq5XG\");\r\n\r\nclass CheckoutForm extends React.Component {\r\n  state = {\r\n    loading: true,\r\n    error: null,\r\n    success: false,\r\n  };\r\n  handleSubmit = async (event) => {\r\n    // Block native form submission.\r\n    event.preventDefault();\r\n\r\n    const { stripe, elements } = this.props;\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not loaded yet. Make sure to disable\r\n      // form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    this.setState({ loading: true });\r\n    // Get a reference to a mounted CardElement. Elements knows how\r\n    // to find your CardElement because there can only ever be one of\r\n    // each type of element.\r\n    const cardElement = elements.getElement(CardElement);\r\n\r\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n      type: \"card\",\r\n      card: cardElement,\r\n    });\r\n\r\n    authAxios\r\n      .post(\"/api/handle-payment\", { card: cardElement })\r\n      .then((res) => {\r\n        this.setState({ loading: false, success: true });\r\n      })\r\n      .catch((err) => {\r\n        this.setState({ loading: false, error: err });\r\n      });\r\n\r\n    if (error) {\r\n      console.log(\"[error]\", error);\r\n    } else {\r\n      console.log(\"[PaymentMethod]\", paymentMethod);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { stripe } = this.props;\r\n    const { error, loading, success } = this.state;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <CardElement />\r\n\r\n          <Button\r\n            primary\r\n            type=\"submit\"\r\n            disabled={!stripe}\r\n            style={{ marginTop: \"10px\" }}\r\n          >\r\n            Pay\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst InjectedCheckoutForm = () => {\r\n  return (\r\n    <Container text>\r\n      <h3>Complete your Order</h3>\r\n      <Elements stripe={stripePromise}>\r\n        <ElementsConsumer>\r\n          {({ elements, stripe }) => (\r\n            <CheckoutForm elements={elements} stripe={stripe} />\r\n          )}\r\n        </ElementsConsumer>\r\n      </Elements>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default InjectedCheckoutForm;\r\n"]},"metadata":{},"sourceType":"module"}